
/**诺诺金服前端团队
 *创建于2018-8-7 11:20:31
*/
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global.Ec = factory());
}(this, (function () {
	var date = new Date();
	var timeStr = date.getFullYear() + "-" + (date.getMonth() + 1) + "-" + date.getDate() + " " + date.getHours() + ":" + date.getMinutes() + ":" + date.getSeconds();

	/**为元素添加事件
	 * @el 要添加事件的元素
	 * @eventType 要添加事件的类型（click……）
	 * @handler 事件对应的处理程序
	 */
	function addEvent(el, eventType, handler) {
		if (el.addEventListener) {
			el.addEventListener(eventType, handler, false);
		} else if (el.attachEvent) {
			el.attachEvent('on' + eventType, handler);
		} else {
			el['on' + eventType] = handler;
		}
	}
	/**获取event对象
	 * @e 传入的event对象
	 */
	function getEventObj(e) {
		return e ? e : window.event;
	}

	function initGetDomTarget() {
	    //初始化获取触发错误的dom元素
	    this.target = null;
	    this.triggerStartTime = 0;
	    this.triggerEndTime = 0;
	    this.targetClass = '';
	    this.targetId = '';
	    bindEvent.call(this);
	}

	function bindEvent() {
	    var _this = this;

	    addEvent(window, 'click', function (e) {
	        e = getEventObj(e);
	        _this.target = e.target || e.srcElement;
	        _this.targetId = e.target.id;
	        _this.targetClass = e.target.className;
	        _this.triggerEndTime = new Date().getTime();
	    });
	}

	function createTargetStr() {
	    //创建字符串格式的html元素
	    var str = '<';
	    str += this.target.tagName.toLowerCase();
	    if (this.targetClass) {
	        str += ' class="' + this.targetClass + '"';
	    }
	    if (this.targetId) {
	        str += ' id="' + this.targetId + '"';
	    }
	    str += '>\u2026\u2026';
	    this.target = null; //生成触发dom元素str后，清除ec实例的目标元素属性
	    return str;
	}

	function getLocation() {
		var _this = this;

		//html5 API获取经纬度
		if (navigator.geolocation) {
			navigator.geolocation.getCurrentPosition(function (position) {
				var obj = {
					location: position.coords.longitude + ',' + position.coords.latitude,
					key: 'c2e7468c5e2d9b072bc08bcedbe3caca'
				};
				transformLaAndLoToAddress.call(_this, obj);
			}, function (err) {//定位发生错误，不执行任何操作
				// console.log(err.code, err.message)
			});
		}
	}

	function transformLaAndLoToAddress(data) {
		var _this2 = this;

		//把经纬度转换成地址
		var url = 'http://restapi.amap.com/v3/geocode/regeo';
		ajax({
			type: 'POST',
			url: url,
			data: data,
			success: function success(response) {
				response = JSON.parse(response);
				_this2.ecData.userLocation = response.regeocode.formatted_address;
			}
		});
	}

	function ajax(options) {
		options = options || {};
		options.type = (options.type || "GET").toUpperCase();
		options.dataType = options.dataType || "json";
		var params = formatParams(options.data);

		//创建 - 非IE6 - 第一步
		if (window.XMLHttpRequest) {
			var xhr = new XMLHttpRequest();
		} else {
			//IE6及其以下版本浏览器
			var xhr = new ActiveXObject('Microsoft.XMLHTTP');
		}

		//接收 - 第三步
		xhr.onreadystatechange = function () {
			if (xhr.readyState == 4) {
				var status = xhr.status;
				if (status >= 200 && status < 300) {
					options.success && options.success(xhr.responseText, xhr.responseXML);
				} else {
					options.fail && options.fail(status);
				}
			}
		};

		//连接 和 发送 - 第二步
		if (options.type == "GET") {
			xhr.open("GET", options.url + "?" + params, true);
			xhr.send(null);
		} else if (options.type == "POST") {
			xhr.open("POST", options.url, true);
			//设置表单提交时的内容类型
			xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
			xhr.send(params);
		}
	}

	function formatParams(data) {
		var arr = [];
		for (var name in data) {
			arr.push(encodeURIComponent(name) + "=" + data[name]);
		}
		return arr.join("&");
	}

	function initEc(Ec) {
		//初始化这个类
		Ec.prototype.init = function (cb) {
			this.ecData = {
				errorMesg: '', //错误信息
				errorTip: '', //针对错误信息，做出的人性化提示
				errorFile: '', //错误文件路径名称
				errorLine: '', //错误代码行
				errorColum: '', //错误代码列
				userAgent: {//用户代理信息

				},
				errorTime: '', //发生错误的事件
				userLocation: '', //发生错误所处地点
				domTarget: '' //触发错误的dom元素
			};
			this.cb = cb;
			bindGlobalErrorEvent.call(this);
			initGetDomTarget.call(this);
			getLocation.call(this);
		};
	}

	function bindGlobalErrorEvent() {
		var _this = this;

		//给window绑定错误事件处理程序
		addEvent(window, 'error', function (e) {
			//如果页面触发了错误
			e = getEventObj(e);
			//获取这些错误信息
			_this.ecData.errorMesg = e.message;
			_this.ecData.errorFile = e.filename;
			_this.ecData.errorLine = e.lineno;
			_this.ecData.errorColum = e.colno;
			_this.ecData.errorTime = timeStr;
			setTimeout(function () {
				if (_this.target) {
					//如果ec实例有错误触发目标，那么生成对应的dom字符串，供传给后台保存，以便清晰记录准确定位
					_this.ecData.domTarget = createTargetStr.call(_this);
				}
				//执行初始化时用户传入的回调函数，在该函数中执行对错误信息的上报操作
				_this.cb(_this.ecData);
			}, 0);
		});
	}

	function Ec(cb) {
		this.init(cb);
	}
	initEc(Ec);

	return Ec;

})));
